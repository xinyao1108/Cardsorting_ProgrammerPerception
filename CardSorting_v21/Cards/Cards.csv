Card Name,Card Description,Category
input_ips,"<mark>input_ips</mark>, input_size =  load_array(args.input_file)",Unique device ID
pings,"(<mark>pings</mark>, trace, scans) = self.result
if <mark>pings</mark>:
    ret.append(str(<mark>pings</mark>))
if trace and trace != self.trace:
    self.trace = trace
    ret.append(utils.traceToStr(trace))
if scans:
    ret.append(str(scans))",Unique device ID
gdf_mask,<mark>gdf_mask</mark> = gdf.astype('int').as_matrix(),Unique device ID
addrinfo,"<mark>addrinfo</mark> = utils.getaddr(host)
if not <mark>addrinfo</mark>:
	utils.error(Exception(""Unable to resolve host ( %s )"" % host))
	sys.stderr.flush()
	continue
conf = {""HOSTS"": {host: <mark>addrinfo</mark>}}",Unique device ID
api_key,"<mark>api_key</mark> = ipstack()
if <mark>api_key</mark> == """" :
    print(""""Add you ipstack api key to plugins/api.py"""")
    exit()
if gmap() == """" :
    print(""""Add you Google Heatmap api key to plugins/api.py"""")
    exit()",Unique device ID
email,<mark>email</mark> = x+'@'+domain,Account/Individual identifier
name,<mark>name</mark> = self._format_name(<mark>name</mark>),Account/Individual identifier
username,"<mark>username</mark> = config.get(section, 'imap-username')",Account/Individual identifier
password,"<mark>password</mark> = config.get(section, 'imap-password')
if not ssl:
    imap.starttls()
imap.login(username, <mark>password</mark>)",Account/Individual identifier
driver,<mark>driver</mark> = webdriver.Firefox(),Account/Individual identifier
"yr, mt, dy","<mark>yr</mark> = int(year)-int(age)
<mark>mt</mark> = input('Enter the month you were born in: ')
<mark>dy</mark> = input('Enter the date of the month you were born in: ')",Demographics
"m, d, y","<mark>m</mark> = input('Enter your birthmonth(1-12): ')
<mark>d</mark> = input('Enter your date of Birthday (1-31): ')
<mark>y</mark> = int(input('Enter your birthyear: '))",Demographics
age,<mark>age</mark> = input('Enter your age: '),Demographics
gmap3,"<mark>gmap3</mark> = gmplot.GoogleMapPlotter(20.5937, 78.9629, 5)",Demographics
sender,"<mark>sender</mark> = 'from@fromdomain.com'
receivers = ['to@tm.zakx.de']
message = """"""""""""From: From Person <from@fromdomain.com>
To: To Person <to@todomain.com>
Subject: SMTP e-mail test
This is a test e-mail message.
""""""""""""""",Demographics
his,"<mark>his</mark> = h_output.histories
bmk = b_output.bookmarks",Internet traffic
browserhistory,"<mark>browserhistory</mark> = get_browserhistory()
<mark>browserhistory</mark> = {}
cursor.execute(_SQL)
query_result = cursor.fetchall()
<mark>browserhistory</mark>[browser] = query_result",Internet traffic
session_cookie_structure,"def encode(secret_key, <mark>session_cookie_structure</mark>):
    app = MockApp(secret_key)
    <mark>session_cookie_structure</mark> = \
        dict(ast.literal_eval(<mark>session_cookie_structure</mark>))
    si = SecureCookieSessionInterface()
    s = si.get_signing_serializer(app)

    return s.dumps(<mark>session_cookie_structure</mark>)",Internet traffic
session_cookie_value,"def decode(<mark>session_cookie_value</mark>, secret_key=None):
    if secret_key == None:
        compressed = False
        payload = <mark>session_cookie_value</mark>
        if payload.startswith("".""):
            compressed = True
            payload = payload[1:]
        data = payload.split(""."")[0]
    else:
        app = MockApp(secret_key)
        si = SecureCookieSessionInterface()
        s = si.get_signing_serializer(app)
        return s.loads(<mark>session_cookie_value</mark>)",Internet traffic
paypal_mapping_id,"class AccountStatementImport(models.TransientModel):
    _inherit = ""account.statement.import""
    <mark>paypal_mapping_id</mark> = fields.Many2one(
        string=""PayPal mapping"",
        comodel_name=""account.statement.import.paypal.mapping"",
    )",Commercial/Finanacial information
online_bank_statement_provider,"class AccountJournal(models.Model):
    _inherit = ""account.journal""
    <mark>online_bank_statement_provider</mark> = fields.Selection(
        selection=lambda self: self.env[
            ""account.journal""
        ]._selection_online_bank_statement_provider(),
        help=""Select the type of service provider (a model)"",
    )",Commercial/Finanacial information
transaction_id,"<mark>transaction_id</mark> = pp.Word(pp.nums) + pp.Suppress(pp.White())
balance = pp.Combine(
    pp.Word(pp.nums + "","") + ""."" + pp.Word(pp.nums, exact=2) + pp.Optional(""CR"")
)
date_pattern = pp.Word(pp.nums, exact=6)
merchant = pp.restOfLine()",Commercial/Finanacial information
PAYMENT_TOKEN,"CLIENT_ID = ""abc123""
<mark>PAYMENT_TOKEN</mark> = ""5a4dae68-2715-4b1e-8bb2-2c2dbe9255f6""
SECRET = ""123abc""
VARIANT = ""wallet""",Commercial/Finanacial information
tax,"description = ""payment""
currency = ""USD""
delivery = Decimal(10)
status = PaymentStatus.WAITING
<mark>tax</mark> = Decimal(10)
token = PAYMENT_TOKEN
total = Decimal(220)
captured_amount = Decimal(0)
variant = VARIANT
transaction_id = None",Commercial/Finanacial information
face_locations,"def test_image(image_to_check, model, upsample):
    unknown_image = face_recognition.load_image_file(image_to_check)
    <mark>face_locations</mark> = face_recognition.face_locations(
        unknown_image, number_of_times_to_upsample=upsample, model=model
    )
    for <mark>face_location</mark> in <mark>face_locations</mark>:
        print_result(image_to_check, <mark>face_location</mark>)",Biometrics
known_face_encodings,"def scan_known_people(known_people_folder):
    known_names = []
    <mark>known_face_encodings</mark> = []
    for file in image_files_in_folder(known_people_folder):
        basename = os.path.splitext(os.path.basename(file))[0]
        img = face_recognition.load_image_file(file)
        encodings = face_recognition.face_encodings(img)
    return known_names, <mark>known_face_encodings</mark>",Biometrics
face,"faces = []
for pixel_sequence in pixels:
    <mark>face</mark> = [int(pixel) for pixel in pixel_sequence.split("" "")]
    faces.append(<mark>face</mark>)
faces = np.asarray(faces)
faces = np.expand_dims(faces, -1)
emotions = pd.get_dummies(data[""emotion""]).as_matrix()",Biometrics
MP4ASampleEntryBox,"<mark>MP4ASampleEntryBox</mark> = Struct(
    ""version"" / Default(Int16ub, 0),
    ""channels"" / Default(Int16ub, 2),
    ""bits_per_sample"" / Default(Int16ub, 16),
    ""packet_size"" / Const(Int16ub, 0),
    ""sampling_rate"" / Int16ub,
)
Embedded(Switch(this.format, {
        b""ec-3"": MP4ASampleEntryBox,
        b""mp4a"": MP4ASampleEntryBox,
        b""enca"": MP4ASampleEntryBox,
        b""avc1"": AVC1SampleEntryBox,
})",Multimedia Data
m3u8_url,"def run(self, <mark>m3u8_url</mark>, dir=''):
    self.dir = dir
    if self.dir and not os.path.isdir(self.dir):
        os.makedirs(self.dir)
    r = self.session.get(<mark>m3u8_url</mark>, timeout=10)
    if r.ok:
        body = r.content
        if body:
            ts_list = [urlparse.urljoin(<mark>m3u8_url</mark>, n.strip()) for n in
                       body.split('\n') if n and not n.startswith('#')]
            ts_list = zip(ts_list, [n for n in xrange(len(ts_list))])",Multimedia Data
stream,"<mark>stream</mark> = io.BytesIO()
for _ in camera.capture_continuous(<mark>stream</mark>, 'jpeg', use_video_port=True):
    <mark>stream</mark>.seek(0)
    yield stream.read()
    <mark>stream</mark>.truncate()",Multimedia Data
new_empID,"<mark>new_empID</mark> = request.form['empID']
new_name = request.form['name']
new_departmentID = request.form['deptID']
new_salary = request.form['salary']
new_email = request.form['email']
new_locationID = request.form['locID']",Employment
skill,"<mark>skill</mark> = page.find_all('span', class_ = ""pv-skill-category-entity__name-text"")
arraylen3 = len(page.find_all('span', class_ = ""pv-skill-category-entity__name-text""))      
profile = link
<mark>skill</mark> = list(map(lambda x: x.text.strip(), <mark>skill</mark>))[0:arraylen3]",Employment
employees,"for name in scraper.<mark>employees</mark>:
    f.write(""%s\n"", name)
names = scraper.<mark>employees</mark> if args.company else open(args.file, 'r').readlines()",Employment
profile,"<mark>profile</mark> = profiles_list[i]
name = <mark>profile</mark>['Name']
surname = <mark>profile</mark>['Surname']
profile_link = <mark>profile</mark>['Linkedin_profile']",Employment
institution,"<mark>institution</mark> = page.find_all('div', class_ = ""pv-entity__degree-info"")
degree = page.find_all('p', class_ = ""pv-entity__degree-name"")
dates = page.find_all('p', class_ = ""pv-entity__dates"")",Education
addr,"for line in open(os.path.join('data', 'country_test_ipv4_data.txt')):
    (<mark>addr</mark>, country_short) = line.strip().split()
    rec = database.get_all(<mark>addr</mark>)",Location
address,"<mark>address</mark> = DictParser.get_first_key(obj, 
			['address', 'addr', 'storeaddress'])
item['city'] = DictParser.get_first_key(<mark>address</mark>,
        DictParser.city_keys)
item['state'] = DictParser.get_first_key(<mark>address</mark>,
        DictParser.region_keys)
item['postcode'] = DictParser.get_first_key(<mark>address</mark>,
        DictParser.postcode_keys)
item['country'] = DictParser.get_first_key(<mark>address</mark>,
        DictParser.country_keys)",Location
locs,"def get_fuzzy_locations(lat, lng, cookie, sigma=2):
    <mark>locs</mark> = get_instagram_locations(lat, lng, cookie)
    loc_ids = [v[""external_id""] for v in <mark>locs</mark> if ""external_id"" in v]
    std_lat = pstdev([v[""lat""] for v in <mark>locs</mark> if ""lat"" in v])
    std_lng = pstdev([v[""lng""] for v in <mark>locs</mark> if ""lng"" in v])",Location
long,"def gps_goal_pose_callback(self, data):
    lat = data.pose.position.y
    <mark>long</mark>= data.pose.position.x
    z = data.pose.position.z
    euler = tf.transformations.euler_from_quaternion(data.pose.orientation)
    roll = euler[0]
    pitch = euler[1]",Location
latitude,"def _latlngToPixelXY(lat, lng):
    <mark>latitude</mark> = _clip(lat, _minLatitude, _maxLatitude)
    longitude = _clip(lng, _minLongitude, _maxLongitude)

    x = (longitude + 180) / 360.0
    sinLatitude = math.sin(<mark>latitude</mark> * math.pi / 180.0)
    y = 0.5 - math.log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * math.pi)

    mapSize = 256 << _level
    pixelX = int(_clip(x * mapSize + 0.5, 0, mapSize - 1))
    pixelY = int(_clip(y * mapSize + 0.5, 0, mapSize - 1))
    return pixelX, pixelY",Location
Attention Check,Please place this card in the Sensitive stack,This is an attention check card
